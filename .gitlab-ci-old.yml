stages:
  - build
  - upload_to_s3
  - deploy

variables:
  STAGING_FUNCTION: glosuite-backend-dev-main
  PRODUCTION_FUNCTION: glosuite-backend-prod-main

.build_template: &build
  stage: build
  image: node
  only:
    - staging
    - master
  before_script:
    - apt-get update -y
  script:
    - npm install -f
    # - npm i -f -g node-prune
    # - node-prune
    # - npm i -f -g modclean
    # - modclean -n default:safe,default:caution -r
    - rm -rf .git/
    - rm -rf $FUNCTION_NAME.zip
    - apt-get install zip -y
    - npm run build
    - npm install -f --omit=dev
    - cp -r node_modules dist/
    # - npm run seed
    - cd dist
    - zip -r9q $FUNCTION_NAME.zip .
    - ls -l
  artifacts:
    paths:
      - ./dist/$FUNCTION_NAME.zip

build staging:
  <<: *build
  only:
    - staging
  variables:
    FUNCTION_NAME: $STAGING_FUNCTION

build prod:
  <<: *build
  only:
    - master
  when: manual
  variables:
    FUNCTION_NAME: $PRODUCTION_FUNCTION



.upload_to_s3: &upload_to_s3
  stage: upload_to_s3
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  only:
    - staging
    - master
  script:
    - aws s3 cp dist/$FUNCTION_NAME.zip s3://$S3_RESOURCES_BUCKET_VALUE/$FUNCTION_NAME.zip

upload to s3 staging:
  <<: *upload_to_s3
  only:
    - staging
  variables:
    S3_RESOURCES_BUCKET_VALUE: ${S3_RESOURCES_BUCKET_STAGING}
    FUNCTION_NAME: $STAGING_FUNCTION

upload to s3 prod:
  <<: *upload_to_s3
  only:
    - master
  when: manual
  variables:
    S3_RESOURCES_BUCKET_VALUE: ${S3_RESOURCES_BUCKET_PROD}
    FUNCTION_NAME: $PRODUCTION_FUNCTION



.deploy_template: &deploy
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  only:
    - staging
    - master
  script:
    - aws lambda update-function-code --function-name=$FUNCTION_NAME --s3-bucket $S3_RESOURCES_BUCKET_VALUE --s3-key $FUNCTION_NAME.zip --region=${AWS_DEFAULT_REGION}
    - aws lambda wait function-updated --function-name=$FUNCTION_NAME
    - aws lambda update-function-configuration --function-name=$FUNCTION_NAME --timeout 300 --environment "Variables={APP_NAME=$APP_NAME_VALUE, APP_DESCRIPTION=$APP_DESCRIPTION_VALUE, APP_VERSION=$APP_VERSION_VALUE, DATABASE_TYPE=$DATABASE_TYPE_VALUE, DATABASE_HOST=$DATABASE_HOST_VALUE, DATABASE_USER=$DATABASE_USER_VALUE, DATABASE_PASSWORD=$DATABASE_PASSWORD_VALUE, DATABASE_PORT=$DATABASE_PORT_VALUE, DATABASE_NAME=$DATABASE_NAME_VALUE, DATABASE_CHARSET=$DATABASE_CHARSET_VALUE, SECRET_JWT=$SECRET_JWT_VALUE, EXPIRED_IN=$EXPIRED_IN_VALUE, SMTP_HOST=$SMTP_HOST_VALUE, SMTP_PORT=$SMTP_PORT_VALUE, SMTP_USER=$SMTP_USER_VALUE, SMTP_PASS=$SMTP_PASS_VALUE, FROM_EMAIL=$FROM_EMAIL_VALUE, AUTH_API_PATH=$AUTH_API_PATH_VALUE, ORDERS_SYNC_PAGE_SIZE=$ORDERS_SYNC_PAGE_SIZE_VALUE, ORDERS_SYNC_CURRENT_PAGE=$ORDERS_SYNC_CURRENT_PAGE_VALUE, CATALOG_SYNC_PAGE_SIZE=$CATALOG_SYNC_PAGE_SIZE_VALUE, CATALOG_SYNC_CURRENT_PAGE=$CATALOG_SYNC_CURRENT_PAGE_VALUE, ORDERS_SYNC_TIMEOUT=$ORDERS_SYNC_TIMEOUT_VALUE, CATALOG_SYNC_TIMEOUT=$CATALOG_SYNC_TIMEOUT_VALUE, SYNC_DEFAULT_MARGE=$SYNC_DEFAULT_MARGE_VALUE, SYNC_MAGENTO_STOCK=$SYNC_MAGENTO_STOCK_VALUE }"


deploy staging:
  <<: *deploy
  only:
    - staging
  variables:
    FUNCTION_NAME: $STAGING_FUNCTION
    APP_NAME_VALUE: ${APP_NAME_STAGING}
    APP_DESCRIPTION_VALUE: ${APP_DESCRIPTION_STAGING}
    APP_VERSION_VALUE: ${APP_VERSION_STAGING}
    DATABASE_TYPE_VALUE: ${DATABASE_TYPE_STAGING}
    DATABASE_HOST_VALUE: ${DATABASE_HOST_STAGING}
    DATABASE_USER_VALUE: ${DATABASE_USER_STAGING}
    DATABASE_PASSWORD_VALUE: ${DATABASE_PASSWORD_STAGING}
    DATABASE_PORT_VALUE: ${DATABASE_PORT_STAGING}
    DATABASE_NAME_VALUE: ${DATABASE_NAME_STAGING}
    DATABASE_CHARSET_VALUE: ${DATABASE_CHARSET_STAGING}
    SECRET_JWT_VALUE: ${SECRET_JWT_STAGING}
    EXPIRED_IN_VALUE: ${EXPIRED_IN_STAGING}
    SMTP_HOST_VALUE: ${SMTP_HOST_STAGING}
    SMTP_PORT_VALUE: ${SMTP_PORT_STAGING}
    SMTP_USER_VALUE: ${SMTP_USER_STAGING}
    SMTP_PASS_VALUE: ${SMTP_PASS_STAGING}
    FROM_EMAIL_VALUE: ${FROM_EMAIL_STAGING}
    AUTH_API_PATH_VALUE: ${AUTH_API_PATH_STAGING}
    ORDERS_SYNC_PAGE_SIZE_VALUE: ${ORDERS_SYNC_PAGE_SIZE_STAGING}
    ORDERS_SYNC_CURRENT_PAGE_VALUE: ${ORDERS_SYNC_CURRENT_PAGE_STAGING}
    CATALOG_SYNC_PAGE_SIZE_VALUE: ${CATALOG_SYNC_PAGE_SIZE_STAGING}
    CATALOG_SYNC_CURRENT_PAGE_VALUE: ${CATALOG_SYNC_CURRENT_PAGE_STAGING}
    ORDERS_SYNC_TIMEOUT_VALUE: ${ORDERS_SYNC_TIMEOUT_STAGING}
    CATALOG_SYNC_TIMEOUT_VALUE: ${CATALOG_SYNC_TIMEOUT_STAGING}
    SYNC_DEFAULT_MARGE_VALUE: ${SYNC_DEFAULT_MARGE_STAGING}
    SYNC_MAGENTO_STOCK_VALUE: ${SYNC_MAGENTO_STOCK_STAGING}
    S3_RESOURCES_BUCKET_VALUE: ${S3_RESOURCES_BUCKET_STAGING}

deploy prod:
  <<: *deploy
  only:
    - master
  when: manual
  variables:
    FUNCTION_NAME: $PRODUCTION_FUNCTION
    APP_NAME_VALUE: ${APP_NAME_PROD}
    APP_DESCRIPTION_VALUE: ${APP_DESCRIPTION_PROD}
    APP_VERSION_VALUE: ${APP_VERSION_PROD}
    DATABASE_TYPE_VALUE: ${DATABASE_TYPE_PROD}
    DATABASE_HOST_VALUE: ${DATABASE_HOST_PROD}
    DATABASE_USER_VALUE: ${DATABASE_USER_PROD}
    DATABASE_PASSWORD_VALUE: ${DATABASE_PASSWORD_PROD}
    DATABASE_PORT_VALUE: ${DATABASE_PORT_PROD}
    DATABASE_NAME_VALUE: ${DATABASE_NAME_PROD}
    DATABASE_CHARSET_VALUE: ${DATABASE_CHARSET_PROD}
    SECRET_JWT_VALUE: ${SECRET_JWT_PROD}
    EXPIRED_IN_VALUE: ${EXPIRED_IN_PROD}
    SMTP_HOST_VALUE: ${SMTP_HOST_PROD}
    SMTP_PORT_VALUE: ${SMTP_PORT_PROD}
    SMTP_USER_VALUE: ${SMTP_USER_PROD}
    SMTP_PASS_VALUE: ${SMTP_PASS_PROD}
    FROM_EMAIL_VALUE: ${FROM_EMAIL_PROD}
    AUTH_API_PATH_VALUE: ${AUTH_API_PATH_PROD}
    ORDERS_SYNC_PAGE_SIZE_VALUE: ${ORDERS_SYNC_PAGE_SIZE_PROD}
    CATALOG_SYNC_PAGE_SIZE_VALUE: ${CATALOG_SYNC_PAGE_SIZE_PROD}
    CATALOG_SYNC_CURRENT_PAGE_VALUE: ${CATALOG_SYNC_CURRENT_PAGE_PROD}
    ORDERS_SYNC_TIMEOUT_VALUE: ${ORDERS_SYNC_TIMEOUT_PROD}
    CATALOG_SYNC_TIMEOUT_VALUE: ${CATALOG_SYNC_TIMEOUT_PROD}
    SYNC_DEFAULT_MARGE_VALUE: ${SYNC_DEFAULT_MARGE_PROD}
    SYNC_MAGENTO_STOCK_VALUE: ${SYNC_MAGENTO_STOCK_PROD}
    S3_RESOURCES_BUCKET_VALUE: ${S3_RESOURCES_BUCKET_PROD}
